1. Add leveling to /mine
2. Add how much extra xp all tools get
3. Rename equippable items to tools
4. Fix axes to have what they can get and how much
5. Fix commands/ dir

---

Title: 🌲Tree Chopped
Description: You successfully chopped down an Oak Tree
Fields:
- Time Took: ⌛ 10s
- Logs Obtained: :oak_wood: 4 Oak Wood
- Rare Drops: ❌ None
- Chopping Streak: 🔥4
- Axe Durability: 🪓 21/25
- XP Gained: ⭐ +40 Lumberjack XP

---

const { AttachmentBuilder } = require('discord.js');
const DataService = require('../../../database/repositories/userDataRepositories');
const path = require('path');
const activeUsers = new Set();
const { xp } = require('../../../utils/helper');

module.exports = {
	data: { name: 'choptree', description: 'Chop down trees with your axe for wood materials' },

	run: async ({ interaction }) => {
		const userId = interaction.user.id;

		if (activeUsers.has(userId)) {
			return interaction.reply({
				embeds: [
					{
						description: `<:Removed:1338951500524949546> You are already chopping a tree.`,
						color: 0xffffff,
					},
				],
			});
		}

		activeUsers.add(userId);
		await interaction.deferReply();

		try {
			const userData = await DataService.getUserData(userId);
			const equippedItem = userData.equippedItem;

			if (!equippedItem || equippedItem.category !== 'axe') {
				activeUsers.delete(userId);
				return interaction.editReply(`### <:Removed:1338951500524949546> Equip an axe to chop a tree.`);
			}

			const axe = equippedItem;
			const treeType = ['oak_tree', 'birch_tree'][Math.floor(Math.random() * 2)];
			const woodType = `${treeType.split('_')[0]}_wood`;
			const treeImage = new AttachmentBuilder(path.resolve(__dirname, '../../../images', `${treeType}.png`));

			const woodCollected = Math.floor(Math.random() * 5) + 1;
			const woodAmount = userData.materials[woodType] || 0;

			const progressStep = (axe.choppingPower === Infinity ? 100 : axe.choppingPower) || 10;
			const estimatedTime = (100 / progressStep) * 1;

			const formattedTreeName = treeType.replace('_tree', '').replace(/^\w/, (c) => c.toUpperCase());

			const embed = {
				color: 0x90ee90,
				title: `Chopping ${formattedTreeName} Tree..`,
				description: `You have started chopping a **${formattedTreeName} Tree** 🌳`,
				fields: [
					{ name: 'Tree Type', value: `${formattedTreeName} Tree`, inline: true },
					{ name: 'Progress', value: '0%', inline: true },
				],
				footer: { text: interaction.user.username, icon_url: interaction.user.displayAvatarURL() },
				image: { url: `attachment://${treeType}.png` },
			};

			await interaction.editReply({ embeds: [embed], files: [treeImage] });

			for (let progress = progressStep; progress <= 100; progress += progressStep) {
				embed.fields[1].value = progress === 100 ? `DONE (${estimatedTime}s)` : `${progress}%`;
				await interaction.editReply({ embeds: [embed] });

				if (progress === 100) {
					const userXpMultiplier = userData.levelData.prestige + 1;
					const toolMultiplier = axe.xpMultiplier || 1;
					const xpUpgradeMultiplier = 1.0;
					const globalXpMultiplier = 1.0;
					const earnedXp = xp.calculateXp(woodType, 1, userXpMultiplier, toolMultiplier, xpUpgradeMultiplier, globalXpMultiplier);
					const xpResult = await xp.applyXp(earnedXp, userId);

					embed.title = `${formattedTreeName} Tree Chopped!`;
					embed.description =
						`🌲 **You've successfully chopped down a ${formattedTreeName} Tree!**\n\n` +
						`- 🪵 **Wood Collected:** +${woodCollected} ${formattedTreeName} Wood\n` +
						`- 📦 **Total Wood:** ${woodAmount + woodCollected} ${formattedTreeName} Wood\n` +
						`- 🏆 **XP Earned:** ${xpResult}`;

					await interaction.editReply({ embeds: [embed] });
					break;
				}

				await new Promise((resolve) => setTimeout(resolve, 1000));
			}

			userData.materials[woodType] = woodAmount + woodCollected;

			if (axe.durability !== Infinity && --axe.durability <= 0) {
				userData.equippedItem = null;
				embed.description += `\n## Your **${axe.name}** broke!`;
				await interaction.editReply({ embeds: [embed] });
			}

			await DataService.updateUserData(userId, 'materials', userData.materials);
			await DataService.updateUserData(userId, 'equippedItem', userData.equippedItem);
		} catch (error) {
			console.error(`Error in ${__filename}:`, error);
			await interaction.editReply({ content: 'There was an error processing your request.', ephemeral: true });
		} finally {
			activeUsers.delete(userId);
		}
	},
};
